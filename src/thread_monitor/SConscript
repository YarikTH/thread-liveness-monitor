import os

Import('env')

AddOption('--toolchain', dest='toolchain', choices=['gnu', 'clang'],
          default='gnu', help='Toolchain Specification')

env = env.Clone()
env.Append( CPPPATH=['..'] )
env.Append( LIBPATH=['.', 'build/thread_monitor'] )
env.Append( CCFLAGS = ['-O3', '-Ofast'] )

if GetOption('debug_build'):
    env.Append( CCFLAGS = '-g' )
else:
    env.Append( CCFLAGS = ['-DNDEBUG', '-DBENCHMARK_ENABLE_LTO=true'] )

env.Replace(TOOLCHAIN=GetOption('toolchain'))
if env['TOOLCHAIN'] == 'clang':
    env.Replace(CXX='clang++')

test_env = env.Clone()

common_libs = ['pthread']
test_libs = ['gtest_main', 'gtest']

env.Append( LIBS = common_libs )

test_env.Append( LIBS = test_libs )
test_env.Append( LIBS = common_libs )

env.Library(target='thread_monitor', 
            source=['thread_monitor.cpp', 'thread_monitor_central_repository.cpp'])

test_env.Program(
    source=['thread_monitor_test.cpp'], 
    LIBS=['thread_monitor'] + test_libs + common_libs,
    LIBPATH=['.', '/usr/gtest']
)

test_env.Program(
    source=['thread_monitor_central_repository_test.cpp'], 
    LIBS=['thread_monitor'] + test_libs + common_libs,
    LIBPATH=['.', '/usr/gtest']
)

env.Program(
    source=['time_support_bm.cpp'],
    LIBS=['thread_monitor', 'benchmark'] + common_libs,
    LIBPATH=['.']
)

env.Program(
    source=['thread_monitor_bm.cpp'],
    LIBS=['thread_monitor', 'benchmark'] + common_libs,
    LIBPATH=['.']
)
